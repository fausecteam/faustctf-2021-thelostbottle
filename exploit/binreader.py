import json

class MapReader:
	def __init__(self, fn, code = None):
		print(fn, len(code))
		if code:
			self.m = code
		else:
			with open(fn, "rb") as inf:
				self.m = inf.read()
		self.pos = 0
		self.len = len(self.m)
	
	def read_bytes(self, n):
		if self.pos + n <= self.len:
			res = self.m[self.pos:self.pos+n]
			self.pos += n
			return res
		self.fail("Unexpected end")

	def read_int(self):
		bs = self.read_bytes(2)
		return bs[0] + 256 * bs[1]

	def read_string(self):
		sz = self.read_int()
		bs = self.read_bytes(sz)
		bs = [(b + ord('a')) % 256 for b in bs]
		return bytes(bs).decode()

	def read_bool(self):
		b = self.read_bytes(1)
		if b == b'X':
			return True
		elif b == b'O':
			return False
		self.fail(f"Unknown boolean byte {b}")

	def read_magic(self, s):
		bs = self.read_bytes(len(s))
		if bs != s.encode():
			self.fail(f"Expected {s} not found, got {bs}")

	def read_optional(self, cb):
		b = self.read_bytes(1)
		if b == b'\x01':
			return cb()
		elif b == b'\x00':
			return None
		else:
			self.fail(f"Unknown optional specifier {b}")

	def fail(self, s):
		raise Exception(s)

def map2json_globals(m, j):
	m.read_magic('gl')
	j["globals"] = {
		"posx": m.read_int(),
		"posy": m.read_int(),
		"room": m.read_string()
	}

def map2json_exits(m, jroom, nExits):
	jroom["exits"] = []
	for _ in range(nExits):
		e = {
			"x": m.read_int(),
			"y": m.read_int(),
			"open": m.read_bool(),
			"targetx": m.read_int(),
			"targety": m.read_int(),
			"room": m.read_string()
		}
		jroom["exits"] += [e]

def map2json_blocks(m, jroom, nBlocks):
	jroom["blocks"] = []
	for _ in range(nBlocks):
		m.read_magic('bl')
		b = {
			"img": m.read_string(),
			"pos": []
		}
		bcount = m.read_int()
		for _ in range(bcount):
			b["pos"] += [[m.read_int(), m.read_int()]]
		jroom["blocks"] += [b]

def map2json_elems(m, jroom, nElem):
	jroom["elements"] = {}
	for _ in range(nElem):
		m.read_magic('el')
		uuid = m.read_string()
		e = {
			"id": m.read_int(),
			"x": m.read_int(),
			"y": m.read_int()
		}
		v = m.read_optional(m.read_string)
		if v:
			e["value"] = v
		jroom["elements"][uuid] = e

def map2json_rooms(m, j, nRooms):
	j["rooms"] = {}
	for _ in range(nRooms):
		m.read_magic('rd')
		name = m.read_string()
		s = m.read_bool()
		w = m.read_int()
		h = m.read_int()
		b = m.read_string()
		j["rooms"][name] = {
			"saveable": s,
			"w": w,
			"h": h,
			"background": b
		}
		nExits = m.read_int()
		nBlocks = m.read_int()
		nElem = m.read_int()
		map2json_exits(m, j["rooms"][name], nExits)
		map2json_blocks(m, j["rooms"][name], nBlocks)
		map2json_elems(m, j["rooms"][name], nElem)
		
		
def map2json(fn_in, code = None):
	m = MapReader(fn_in, code)
	
	j = {}

	m.read_magic('affm')
	nRooms = m.read_int()
	# globals
	map2json_globals(m, j)
	# Rooms
	map2json_rooms(m, j, nRooms)
	j["map"] = m.read_string()
	
	return j
	
if __name__ == "__main__":
	import sys
	j = map2json(sys.argv[1])
	with open(sys.argv[2], "w") as outf:
		json.dump(j, outf, indent='\t')
